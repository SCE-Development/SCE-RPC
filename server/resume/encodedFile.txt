{
  "resumeToAdd": {
    "personal": {
      "fullName": "Bilbo Baggins",
      "email": "bilbo.baggins@midearth.com",
      "phoneNumber": "999.999.9999",
      "github": "github.com/volcanoLUL"
    },
    
    "education": {
      "university": "Middle Earth University",
      "graduationDate": "April 1800 B.C.",
      "titleMajor": "B.S. Throwing Rings",
      "college": "Gandalf College of Throwing Things",
      "cumulativeGPA": "4.0",
      "courseWork": "Climbing Volcanos, Stabbing Things, Shotput, Eyeball Dodging"
    },

    "projectList": [
        {
          "projectName": "Saved the World",
          "projectLocation": "Middle Earth",
          "projectToolsUsed": "The Eagles, My LIFE",
          "projectStartDate": "April 1800 B.C.",
          "projectEndDate": "May 1800 B.C.",
          "projectDescription1": "Threw this creepy guys super evil ring into a volcano because it would save all of my friends.",
          "projectDescription2": "Leveraged the FPDF library to format and generate resume files.",
          "projectDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
        },
        {
          "projectName": "Saved the World",
          "projectLocation": "Middle Earth",
          "projectToolsUsed": "The Eagles, My LIFE",
          "projectStartDate": "April 1800 B.C.",
          "projectEndDate": "May 1800 B.C.",
          "projectDescription1": "Threw this creepy guys super evil ring into a volcano because it would save all of my friends.",
          "projectDescription2": "Leveraged the FPDF library to format and generate resume files.",
          "projectDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
        },
        {
          "projectName": "Saved the World",
          "projectLocation": "Middle Earth",
          "projectToolsUsed": "The Eagles, My LIFE",
          "projectStartDate": "April 1800 B.C.",
          "projectEndDate": "May 1800 B.C.",
          "projectDescription1": "Threw this creepy guys super evil ring into a volcano because it would save all of my friends.",
          "projectDescription2": "Leveraged the FPDF library to format and generate resume files.",
          "projectDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
        }
    ],
      
    "experienceList": [
      {
        "organizationName": "Software & Computer Engineering Society (SCE)",
        "positionTitle": "Intern",
        "experienceLocation": "San Jose, CA",
        "experienceStartDate": "June 2020",
        "experienceEndDate": "Present",
        "experienceDescription1": "Worked on a cool resume generating service that will be used by future club members.",
        "experienceDescription2": "Leveraged the FPDF library to format and generate resume files.",
        "experienceDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
      },
      {
        "organizationName": "Software & Computer Engineering Society (SCE)",
        "positionTitle": "Intern",
        "experienceLocation": "San Jose, CA",
        "experienceStartDate": "June 2020",
        "experienceEndDate": "Present",
        "experienceDescription1": "Worked on a cool resume generating service that will be used by future club members.",
        "experienceDescription2": "Leveraged the FPDF library to format and generate resume files.",
        "experienceDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
      },
      {
        "organizationName": "Software & Computer Engineering Society (SCE)",
        "positionTitle": "Intern",
        "experienceLocation": "San Jose, CA",
        "experienceStartDate": "June 2020",
        "experienceEndDate": "Present",
        "experienceDescription1": "Worked on a cool resume generating service that will be used by future club members.",
        "experienceDescription2": "Leveraged the FPDF library to format and generate resume files.",
        "experienceDescription3": "Worked alongside several like-minded peers in pursuit of personal growth and happiness."
      }
    ],

    "skills" : {
      "proficient" : "Java, Javascript, Python",
      "experienced" : "HTML, CSS, C#, PHP",
      "familiar" : "C++, React"
    }
  }
}