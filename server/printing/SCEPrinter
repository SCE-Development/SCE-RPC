#!/usr/bin/env python
#!/usr/bin/env python3
# import printing_server.py
# import curses
# import argparse
# parser = argparse.ArgumentParser(description='Print the mock for 2D printer.')
# parser.add_argument('--mock-output', help="Displays Mock Output", )
# args = parser.parse_args()


# class SCEPrinter():
#     ESCKEY = 27
#     left_copies = 0
#     right_copies = 0
#     printer = self.DeterminePrinterForJob
#     total_copies = self.DeterminePrinterForJob(copies)

#     def _init_(self, printer):
#         self.printer = printer

#     def add_left_printer_copies(self, count):
#         if(printer == "HP-LaserJet-p2015dn-right"):
#             right_copies += count

#     def add_right_printer_copies(self, count):
#         if(printer == "HP-LaserJet-p2015dn-left"):
#             left_copies += count

#     def visual_components(screen):
#         screen = curses.initscr()
#         height, width = screen.getmaxyx()
#         screen.border(0)

#         title = "2D PRINTER MOCK"
# coordinates for positioning title
#     title_x = width//2 - len(title)//2
#     title_y = height-(height-2)
#     screen.addstr(title_y, title_x,
#                   title, curses.A_BOLD)

#     page = "Total Pages Printed: "
#     status = "Status:"
#     subwindow = screen.derwin(
#         20, 50, height-(height-5), (width//2)-50)
#     subwindow.box()
#     subwindow.immedok(True)
#     subwindow.refresh()
#     subwindow.addstr(2, 2, "Printer #1")
#     subwindow.addstr(4, 2, page)
#     subwindow.addstr(4, 4, "copies")
#     subwindow.addstr(5, 2, status)

#     subwindow2 = screen.derwin(
#         20, 50, height-(height-5), width//2)
#     subwindow2.box()
#     subwindow2.immedok(True)
#     subwindow2.refresh()
#     subwindow2.addstr(2, 2, "Printer #2")
#     subwindow2.addstr(4, 2, page)
#     subwindow2.addstr(5, 2, status)

#     screen.addstr(height-8, title_x-15, "Total Server Uptime: ")
#     screen.addstr(height-5, title_x-15, "Most Recently Used Printer: ")
#     exit_message = "----------PRESS ESC TO EXIT---------"
#     exit_message_width = width//2 - len(exit_message)//2
#     screen.addstr(height-3, exit_message_width, exit_message)

#     screen.refresh()

# def create_visual(screen):
#     curses.curs_set(0)
#     visual_components(screen)
#     x = screen.getch()
#     while exitKey != self.ESCKEY:
#         exitKey = screen.getch()
#     curses.endwin()
#     exit()

# curses.wrapper(create_visual)
